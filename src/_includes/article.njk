---
layout: base.njk
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+HK:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/css/main.css">
    <link rel="stylesheet" href="/assets/css/article.css">
</head>
<body class="project-page {% if layout_type %}layout-{{ layout_type }}{% endif %}">
    <div class="progress-bar-container">
        <div class="progress-bar" id="progressBar"></div>
    </div>
    <div class="article-container">
        <div id="passwordOverlay" class="password-overlay">
            <div class="password-container">
                <h2>Protected Content</h2>
                <input type="password" id="passwordInput" placeholder="Enter password">
                <button id="submitPassword">Submit</button>
                <p id="passwordError" class="error-message"></p>
            </div>
        </div>
        <nav class="side-menu" id="sideMenu">
            <ul class="menu-list"></ul>
        </nav>
        <main>
            <div class="article">
                {{ content | safe }}
            </div>
        </main>
    </div>
    
    <script src="/assets/js/main.js"></script>
    <script>
        // Password protection
        document.addEventListener('DOMContentLoaded', function() {
            // Only show password protection for Bloom page
            /*
            if (window.location.pathname.includes('bloom')) {
                const passwordOverlay = document.getElementById('passwordOverlay');
                const passwordInput = document.getElementById('passwordInput');
                const submitButton = document.getElementById('submitPassword');
                const errorMessage = document.getElementById('passwordError');
                const articleContainer = document.querySelector('.article-container');
                
                // Show password overlay
                passwordOverlay.style.display = 'flex';
                
                // Check if password is already verified
                const isVerified = sessionStorage.getItem('bloomVerified');
                if (isVerified === 'true') {
                    passwordOverlay.style.display = 'none';
                }

                // Password verification
                submitButton.addEventListener('click', () => {
                    const password = passwordInput.value;
                    if (password === 'null') {
                        sessionStorage.setItem('bloomVerified', 'true');
                        passwordOverlay.style.display = 'none';
                    } else {
                        errorMessage.textContent = 'Incorrect password. Please try again.';
                        passwordInput.value = '';
                    }
                });

                // Allow Enter key to submit password
                passwordInput.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        submitButton.click();
                    }
                });
            }

            // Progress bar functionality
            function updateProgressBar() {
                const progressBar = document.getElementById('progressBar');
                const windowHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
                const scrolled = (window.scrollY / windowHeight) * 100;
                progressBar.style.width = scrolled + '%';
            }
            
            // Initialize progress bar
            updateProgressBar();
            
            // Update progress bar on scroll
            window.addEventListener('scroll', () => {
                updateProgressBar();
            });

            // Side menu functionality
            const article = document.querySelector('.article');
            const menuList = document.querySelector('.menu-list');
            const headings = article.querySelectorAll('h1, h2');
            
            // Add IDs to headings and create menu items
            headings.forEach((heading, index) => {
                // Create a slug from the heading text
                const slug = heading.textContent
                    .toLowerCase()
                    .replace(/[^a-z0-9]+/g, '-')
                    .replace(/(^-|-$)/g, '');
                
                // Set the heading ID
                heading.id = slug;
                
                // Create menu item
                const li = document.createElement('li');
                const a = document.createElement('a');
                a.textContent = heading.textContent;
                a.href = '#' + slug;
                
                // Add click handler for smooth scrolling
                a.addEventListener('click', (e) => {
                    e.preventDefault();
                    const targetElement = document.getElementById(slug);
                    if (targetElement) {
                        targetElement.scrollIntoView({ behavior: 'smooth' });
                    }
                });
                
                li.appendChild(a);
                menuList.appendChild(li);
            });

            // Update active menu item on scroll
            const menuItems = menuList.querySelectorAll('a');
            const observerOptions = {
                root: null,
                rootMargin: '0px',
                threshold: 0.5
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        // Remove active class from all menu items
                        menuItems.forEach(item => item.classList.remove('active'));
                        // Add active class to current menu item
                        const activeItem = menuList.querySelector(`a[href="#${entry.target.id}"]`);
                        if (activeItem) {
                            activeItem.classList.add('active');
                        }
                    }
                });
            }, observerOptions);

            // Observe all headings
            headings.forEach(heading => observer.observe(heading));
        });
    </script>
</body>
</html> 